#define IMPORTANCE_SAMPLE_COUNT 1024

static const float PI = 3.1415926535897932384626433832795;
static const float SAMPLE_COUNT = IMPORTANCE_SAMPLE_COUNT;

float
radical_inverse_vdc(uint bits)
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

float2
hammersley(uint i, uint N)
{
  return float2(float(i) / float(N), radical_inverse_vdc(i));
}

float3
importance_sample_ggx(float2 Xi, float3 N, float roughness)
{
  float a = roughness * roughness;

  float phi = 2.0 * PI * Xi.x;
  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

  // from spherical coordinates to cartesian coordinates
  float3 H;
  H.x = cos(phi) * sinTheta;
  H.y = sin(phi) * sinTheta;
  H.z = cosTheta;

  // from tangent-space vector to world-space sample vector
  float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
  float3 tangent = normalize(cross(up, N));
  float3 bitangent = cross(N, tangent);

  float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
  return normalize(sampleVec);
}

float
geometry_schlick_ggx(float NdotV, float roughness)
{
  // note that we use a different k for IBL
  float a = roughness;
  float k = (a * a) / 2.0;

  float nom = NdotV;
  float denom = NdotV * (1.0 - k) + k;

  return nom / denom;
}

float
geometry_smith(float3 N, float3 V, float3 L, float roughness)
{
  float NdotV = max(dot(N, V), 0.0);
  float NdotL = max(dot(N, L), 0.0);
  float ggx2 = geometry_schlick_ggx(NdotV, roughness);
  float ggx1 = geometry_schlick_ggx(NdotL, roughness);

  return ggx1 * ggx2;
}

float2
integrate_brdf(float NdotV, float roughness)
{
  float3 V;
  V.x = sqrt(1.0 - NdotV * NdotV);
  V.y = 0.0;
  V.z = NdotV;

  float A = 0.0;
  float B = 0.0;

  float3 N = float3(0.0, 0.0, 1.0);
  for (uint i = 0; i < SAMPLE_COUNT; ++i)
  {
    // generates a sample vector that's biased towards the
    // preferred alignment direction (importance sampling).
    float2 Xi = hammersley(i, uint(SAMPLE_COUNT));
    float3 H = importance_sample_ggx(Xi, N, roughness);
    float3 L = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(L.z, 0.0);
    float NdotH = max(H.z, 0.0);
    float VdotH = max(dot(V, H), 0.0);

    if (NdotL > 0.0)
    {
      float G = geometry_smith(N, V, L, roughness);
      float G_Vis = (G * VdotH) / (NdotH * NdotV);
      float Fc = pow(1.0 - VdotH, 5.0);

      A += (1.0 - Fc) * G_Vis;
      B += Fc * G_Vis;
    }
  }

  A /= float(SAMPLE_COUNT);
  B /= float(SAMPLE_COUNT);

  return float2(A, B);
}

RWTexture2D<float2> u_dst : register(u0, space0);

[numthreads(16, 16, 1)] void
cs(uint3 id
   : SV_DispatchThreadID)
{
  float2 texcoords =
    float2(float(id.x + 0.5) / 512.0f, 1.0 - float(id.y + 0.5) / 512.0f);
  float4 result = float4(integrate_brdf(texcoords.x, texcoords.y), 0.0, 0.0);
  u_dst[id.xy] = result.xy;
}
